// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/mhaqiw/product-service/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductService is an autogenerated mock type for the ProductService type
type ProductService struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: ctx, request
func (_m *ProductService) AddProduct(ctx context.Context, request domain.ProductRequestPayload) (domain.Product, error) {
	ret := _m.Called(ctx, request)

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProductRequestPayload) (domain.Product, error)); ok {
		return rf(ctx, request)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.ProductRequestPayload) domain.Product); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.ProductRequestPayload) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx, sort
func (_m *ProductService) GetAll(ctx context.Context, sort string) (domain.ProductsResponsePayload, error) {
	ret := _m.Called(ctx, sort)

	var r0 domain.ProductsResponsePayload
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.ProductsResponsePayload, error)); ok {
		return rf(ctx, sort)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.ProductsResponsePayload); ok {
		r0 = rf(ctx, sort)
	} else {
		r0 = ret.Get(0).(domain.ProductsResponsePayload)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, sort)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewProductService interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductService creates a new instance of ProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductService(t mockConstructorTestingTNewProductService) *ProductService {
	mock := &ProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
